---
title: "Getting started with R"
author: Maksym Voloshyn
date: 23.09.2024
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
# Your answer in code
c('A', 'B', 'C')
```
> Your answer as text
As letters are char characters, we use single quotes. However in fact they are stored as strings.


* Assign the vector to a variable `my_letters`
```{r}
# Your answer in code
my_letters <- c('A', 'B', 'C')
```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
# Your answer in code
letters
```

> Your answer as text
It prints all letters of English alphabet in a lower case


* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
# Your answer in code
c(my_letters , my_letters)

```

> Your answer as text
It simply combines the elements of both vectors into a single vector. Concatenating my_letters with itself using will result in a vector that repeats the elements of my_letters twice.


* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code
res <- c(my_letters, 1)
typeof(res)
res

```

> Your answer as text
It still considers the vector as character type, converting 1 to a "1" char 


### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
# Your answer in code
my_vec <- 1:8
my_vec + 2
my_vec + 1:4

```

> Your answer as text
When adding `+2`, it adds 2 to each element of the vector. When adding 1 to 4, it adds 1 to the first element, 2 to the second, 3 to the third, 4 to the fourth and then starts again: 1 to the fifth, 2 to the sixth etc. This is dangerous approach as e.g. adding 1:3 will not work due to: longer object length is not a multiple of shorter object length 

### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code
matrix(c(4, 9, 10, 1, 5, 7), nrow = 3, ncol = 2)
A <- matrix(c(4, 9, 10, 1, 5, 7), nrow = 3, ncol = 2)
dim(A)
A[2,2]
A <- cbind(A, c(0,0,0))
A[1,1] <- 0
A
t(A)

```


8. Are any values in `A` larger than 10? 
```{r}
# Your answer in code
any(A > 10)
```

9. Are all values in `A` smaller than 10?
```{r}
# Your answer in code
any(A < 10)
```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
# Your answer in code
add_num_as_char <- function(a, b) {
  as.numeric(a) + as.numeric(b)
}
add_num_as_char("1", "2")

```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code

calc_deviations <- function(x) {
  if (!is.numeric(x)) {
    stop("Input must be a numeric vector")
  }
  mean_value <- mean(x, na.rm = TRUE)
  median_value <- median(x, na.rm = TRUE)
  sd_value <- sd(x, na.rm = TRUE)
  
  return(list(mean_value, median_value, sd_value))
}

res <- calc_deviations(c(2, 3, 6))
res
```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
# Your answer in code



```


